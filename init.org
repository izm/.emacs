#+STARTUP: hidestars

* init.org
  This file must be tangled into =init.el= in the emacs configuration
  directory, =~/init.d/=.

   #+BEGIN_SRC emacs-lisp :tangle no
     (cons
      (car 
       (org-babel-tangle-file
	buffer-file-name
	(expand-file-name (concat user-emacs-directory "init.el"))
	"emacs-lisp"))
      (format-time-string "%Y-%m-%d.%H-%M-%S" (current-time)))
   #+END_SRC

   #+RESULTS:
   : (c:/Users/steve/AppData/Roaming/.emacs.d/init.el . 2017-10-22.17-58-32)


** TODO Tangle to init.el [3/4]

   - [X] Add =:tangle no= to the block below
   - [X] Remove =:tangle= header from source blocks.
   - [X] Add date completed
   - [ ] Add prompt before overwriting =init.el=.  OR... just do it and backup old one?

* Initialize
** package

   =(package-initialize)= must come before configurations of installed
   packages.

   #+BEGIN_SRC emacs-lisp
     ;; Do not edit this file.  See "init.org"
     ;; This file is generated from init.org using org-babel-tangle
     (setq package-enable-at-startup nil)
     (package-initialize)

     ;; packages: use up-to-date MELPA, not ELPA
     (when (>= emacs-major-version 24)
       (require 'package)
       (add-to-list
	'package-archives
	'("melpa" . "http://melpa.org/packages/")
	t)
       (package-initialize))
   #+END_SRC

** use-package
   
   Info about =use-package=: https://github.com/jwiegley/use-package

   #+BEGIN_SRC emacs-lisp
     (require 'use-package)                  ; we want this instead of 'require
     (setq use-package-always-ensure t)      ; ensure package is installed
     (setq use-package-verbose t) 		; report config loading time in *Messages*
   #+END_SRC

   Explicit =use-package= use: 

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; (use-package expand-region
     ;;   :commands expand-region
     ;;   :init
     ;;   (bind-key "C-=" "expand-region"))    
   #+END_SRC

* Emacs

** User
   #+BEGIN_SRC emacs-lisp
   (setq user-full-name "Steven Brown")
   (setq user-mail-address "steven.w.j.brown@gmail.com")
   #+END_SRC

** General
   
   #+BEGIN_SRC emacs-lisp
     (setq ansi-color-faces-vector
	   [default bold shadow italic underline bold bold-italic bold])
     (setq fill-column 80)		; where to wrap lines; set locally with C-x f
     (set-default 'truncate-lines t)	; truncate long lines, don't wrap them
     (setq column-number-mode t)	; show column numbers in modeline
     (setq inhibit-startup-screen t)	; skip startup screen
     (setq tool-bar-mode nil)	; Remove clunky toolbar and icons
     (show-paren-mode t)		; highlight matching parentheses
     (global-hl-line-mode t)		; highlight current line
     (setq visible-bell t)		; blink, don't bark
     (setq x-stretch-cursor t) ; cursor width will match tab character width

     ;;(setq uniquify-buffer-name-style (quote forward) nil (uniquify))
     (setq uniquify-buffer-name-style (quote post-forward-angle-brackets))

     (desktop-save-mode 1)	       ; save the desktop/state of emacs' frames/buffers
     (setq backup-directory-alist `(("." . "~/.emacs.d/.backups"))) ; keep in clean
     (setq backup-by-copying t)                                     ; vs renaming
   #+END_SRC

** Fonts

   =list-fontsets= to see available installed fonts.

   Some good programming fonts [[https://blog.checkio.org/top-10-most-popular-coding-fonts-5f6e65282266?imm_mid=0f5f86][here]].

   1. Inconsolata
   2. Fira Mono
   3. Source Code Pro
   4. Anonymous Pro
   5. M+ 1M
   6. Hack
   7. *DejaVu Sans Mono*
   8. Droid Sans Mono
   9. Ubuntu Mono
   10. Bitsream Vera Sans Mono

   #+BEGIN_SRC emacs-lisp
     ;; Test char and monospace:
     ;; 0123456789abcdefghijklmnopqrstuvwxyz [] () :;,. !@#$^&*
     ;; 0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ {} <> "'`  ~-_/|\?

     ;; (set-face-attribute 'default t :font "DejaVu Sans Mono" :height +1)
     (setq default-font-name nil)
     (cond
      ((find-font (font-spec :name "DejaVu Sans Mono"))
       (setq default-font-name "DejaVu Sans Mono"))
      ;; (set-frame-font "DejaVu Sans Mono-12"))
      ;; ((find-font (font-spec :name "Lucida Console"))
      ;;  (set-frame-font "Lucida Console-12"))
      ;; (setq default-font-name "Lucida Console"))
      ((find-font (font-spec :name "Courier New"))
       ;; (set-frame-font "Courier New-12"))
       (setq default-font-name "Courier New"))
      )
     (when default-font-name
       (add-to-list 'default-frame-alist (cons 'font (concat default-font-name "-12")))
       )
     ;; (set-face-attribute 'default t :family "Monospace" :height +1)
   #+END_SRC

*** Try a font
    #+BEGIN_SRC emacs-lisp :tangle no :results output silent
      (set-frame-font "Lucida Console-12")
    #+END_SRC

** TODO Directories
** TODO Private
** Themes

   - /Custom Themes/ (not /color-themes/) can be loaded and stacked using =load-theme=.
   - Loaded themes must be unloaded individually by =disable-theme=.
   - Both allow tab-completion for applicable themes.
   - [ ] write script to cycle through installed themes at keypress?
   
   #+BEGIN_SRC emacs-lisp
     (unless custom-enabled-themes
       (load-theme 'material t nil))		; load & enable theme, if nothing already set

     (setq custom-safe-themes
	   (quote
	("5999e12c8070b9090a2a1bbcd02ec28906e150bb2cdce5ace4f965c76cf30476" "a4c9e536d86666d4494ef7f43c84807162d9bd29b0dfd39bdf2c3d845dcc7b2e" "c72a772c104710300103307264c00a04210c00f6cc419a79b8af7890478f380e" "555c5a7fa39f8d1538501cc3fdb4fba7562ec4507f1665079021870e0a4c57d8" "3e8ea6a37f17fd9e0828dee76b7ba709319c4d93b7b21742684fadd918e8aca3" "5dc0ae2d193460de979a463b907b4b2c6d2c9c4657b2e9e66b8898d2592e3de5" "04dd0236a367865e591927a3810f178e8d33c372ad5bfef48b5ce90d4b476481" "5e3fc08bcadce4c6785fc49be686a4a82a356db569f55d411258984e952f194a" "7153b82e50b6f7452b4519097f880d968a6eaf6f6ef38cc45a144958e553fbc6" "08b8807d23c290c840bbb14614a83878529359eaba1805618b3be7d61b0b0a32" "98cc377af705c0f2133bb6d340bf0becd08944a588804ee655809da5d8140de6" "130319ab9b4f97439d1b8fd72345ab77b43301cf29dddc88edb01e2bc3aff1e7" "43c1a8090ed19ab3c0b1490ce412f78f157d69a29828aa977dae941b994b4147" "5dd70fe6b64f3278d5b9ad3ff8f709b5e15cd153b0377d840c5281c352e8ccce" "7356632cebc6a11a87bc5fcffaa49bae528026a78637acd03cae57c091afd9b9" "ab04c00a7e48ad784b52f34aa6bfa1e80d0c3fcacc50e1189af3651013eb0d58" "a0feb1322de9e26a4d209d1cfa236deaf64662bb604fa513cca6a057ddf0ef64" default)))
   #+END_SRC

** UTF-8

   #+BEGIN_SRC emacs-lisp
     (setq PYTHONIOENCODING "utf-8")        ;print utf-8 in shell
     (prefer-coding-system 'utf-8)
   #+END_SRC

** ibuffer

   #+BEGIN_SRC emacs-lisp
     (define-key global-map "\C-x\C-b" 'ibuffer) ; 

     (setq ibuffer-saved-filter-groups
       (quote
	(("ibuffer-filter-groups"
	  ("Notebooks"
	   (name . "\\*ein:.*"))
	  ("Python"
	   (used-mode . python-mode))
	  ("org"
	   (used-mode . org-mode))
	  ("dirs"
	   (used-mode . dired-mode))))))

     (setq ibuffer-saved-filters
       (quote
	(("gnus"
	  ((or
	    (mode . message-mode)
	    (mode . mail-mode)
	    (mode . gnus-group-mode)
	    (mode . gnus-summary-mode)
	    (mode . gnus-article-mode))))
	 ("programming"
	  ((or
	    (mode . emacs-lisp-mode)
	    (mode . cperl-mode)
	    (mode . c-mode)
	    (mode . java-mode)
	    (mode . idl-mode)
	    (mode . lisp-mode)))))))
   #+END_SRC

* Packages
  
  If there is a compile error, or "tar not found," try
  =package-refresh-contents= to refresh the package database.

** selected-packages
    =package-selected-packages= is used by ‘package-autoremove’ to decide
    which packages are no longer needed.
    You can use it to (re)install packages on other machines
    by running ‘package-install-selected-packages’.

    #+BEGIN_SRC emacs-lisp :tangle no
      (setq package-selected-packages
	    (quote
	     (org-bullets tangotango-theme leuven-theme eziam-theme alect-themes
			  atom-one-dark-theme borland-blue-theme material-theme
			  helm helm-projectile expand-region org-projectile
			  projectile web-mode)))
    #+END_SRC

*** TODO Superceded by =use-package=?

** expand-region

   Example of how =use-package= can replace =require= and
   =global-set-key=.

   #+BEGIN_SRC emacs-lisp
     (use-package expand-region
       :ensure t
       :defer 1
       :bind ("C-=" . er/expand-region))
   #+END_SRC

** wrap-region

   http://pragmaticemacs.com/emacs/wrap-text-in-custom-characters/

  #+BEGIN_SRC emacs-lisp
    (use-package wrap-region
      :ensure t
      :defer 1
      :config
      (wrap-region-add-wrappers
       '(("*" "*" nil org-mode)
	 ("~" "~" nil org-mode)
	 ("/" "/" nil org-mode)
	 ("=" "=" ":" org-mode) ; Avoid conflict with expand-region, use ':'
	 ("+" "+" "+" org-mode)
	 ("_" "_" nil org-mode)))
	 ;; ("$" "$" nil (org-mode latex-mode))
      (add-hook 'org-mode-hook 'wrap-region-mode))

  #+END_SRC 

** projectile
   
   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :ensure t				; ensure package is downloaded
       :defer t
       :init					; pre-load config
       (setq projectile-enable-caching t)	; resolve missing projects
       ;; (projectile-mode +1)			; global projectil mode
       :config nil				; post-load config
       )
   #+END_SRC  

** org-bullets

   https://thraxys.wordpress.com/2016/01/14/pimp-up-your-org-agenda/

   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :ensure t
       :defer 1
       :init
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode t)))
       ;;  (setq org-bullets-bullet-list '("◉" "◎" "○" "►" "◇"))
       :config
       )

   #+END_SRC

** magit
   A Git version control interface.
   
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :ensure t
       :defer t
       :bind ("C-x g" . magit-status)
       )
   #+END_SRC
   
** themes

   Placeholder to put themes 100% decided on.

   Currently enjoy:
   - leuven-theme
   - material-theme
   - spacemacs-theme

   #+BEGIN_SRC emacs-lisp
     ;; (use-package flatland-theme
     ;;   :ensure t)
     ;; (use-package doom-themes)
   #+END_SRC

** paredit
   http://danmidwood.com/content/2014/11/21/animated-paredit.html

   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :defer t)
   #+END_SRC

** TODO NEW EIN, COMPANY, JEDI [2017-10-19 Thu]
   #+BEGIN_SRC emacs-lisp
     ;; Jupyter python  ;added 2017-10-17
     (use-package ein
       :ensure t
       :defer t
       ;; :backends ein:company-backend
       :init
       (require 'ein-connect)		; not sure why this is needed suddenly..?
       :config
       ;; (advice-add 'request--netscape-cookie-parse :around #'fix-request-netscape-cookie-parse)
       (setq ein:completion-backend 'ein:use-ac-jedi-backend)
       )

     (use-package jedi
       :ensure t
       :defer t
       :init
       :config
       ;; (setq jedi:complete-on-dot t)
       ;; (add-hook 'python-mode-hook 'jedi:setup)
       )

     (use-package company
       :ensure t
       :defer 2
       :init
       (add-hook 'ein:connect-mode-hook 'ein:jedi-setup)
       (add-hook 'python-mode-hook 'company-mode)
       ;; (add-hook 'ein:connect-mode-hook 'company-mode) ; Can't figure out company-jedi + ein

       :config
       (use-package company-jedi)
       (use-package company-quickhelp)
       (company-quickhelp-mode 1)
       (add-to-list 'company-backends 'company-jedi)
       )

   #+END_SRC

** smartscan

   #+BEGIN_SRC emacs-lisp
	  (use-package smartscan
	    :ensure t
	    :defer 1
	    :bind (("M-n" . smartscan-symbol-go-forward)
		   ("M-p" . smartscan-symbol-go-backward))
	    )
   #+END_SRC
   
** TODO multi-cursors
** TODO company
** TODO helm
** TODO gnus
   - 
** TODO erc
   - https://www.emacswiki.org/emacs/EmacsChannel
** TODO org for blog
   - [[https://github.com/org2blog/org2blog][org2blog]]
   - 
* Dired

  Let =dired= try to guess target (copy and rename ops) directory when
  two =dired= buffers open.

  Also useful:
  - writeable dired: 
  - 

  #+BEGIN_SRC emacs-lisp
    (setq dired-dwim-target t)		; guess target directory

  #+END_SRC

* Org Mode
** TODO use conditional environment variables (env: home/work os:win/linux)
   https://stackoverflow.com/questions/17537124/how-to-declare-the-location-of-emacss-init-file-as-a-variable

   #+BEGIN_SRC emacs-lisp :tangle no
     ;; elisp note on conditionally setting variable
     (setq 'my-list-depending-on-system
	   (cond
	    ((string-equal system-type "windows-nt")
	     '(
	       "item 1 windows"
	       "item 2 windows"
	       ))
	    ((string-equal system-type "gnu/linux")
	     '(
	       "item 1 linux"
	       "item 2 linux"
	       ))
	    ))
   #+END_SRC

** Export

   - http://orgmode.org/manual/Export-settings.html#Export-settings

   #+BEGIN_SRC emacs-lisp
     ;; (org-export-creator-string)
     ;; (org-export-with-creator)
     ;; TODO: remove creator string and validation link in footer
     ;; (setq org-export-html-postabmle nil) <-- deprecated
     ;; #+OPTIONS
     (setq org-export-initial-scope "subtree")
     ;; (org-html-head)
   #+END_SRC

** Files
   - [ ] Use platform independent home directory.  (getenv "HOMEPATH")
   #+BEGIN_SRC emacs-lisp
     ;; (add-to-list 'load-path "~/../or
     (if (string-match-p (regexp-quote "steven.brown") (getenv "USERPROFILE"))
         ;; Work setup ;TODO: this is specific to Windows, add Platform
         (setq org-directory (concat (expand-file-name (getenv "USERPROFILE")) "/Projects/org"))
       ;; else, Home setup
       (setq org-directory (concat (expand-file-name (getenv "USERPROFILE")) "/Dropbox/org"))
       )

     (setq org-agenda-files (list (concat org-directory "/notes.org")    ; Home/Learn/Everything
      			    (concat org-directory "/work.org")     ; Work                 
      			    (concat org-directory "/agenda.org")))  ; Life Stuff - rename to 'personal'?

     (setq org-default-notes-file (concat org-directory "/captured.org")) ; Unsorted  Notes
   #+END_SRC

** Other
   #+BEGIN_SRC emacs-lisp
     ;; fontify (pretty formating) code in code blocks
     (setq org-src-fontify-natively t)	; important for init.org !

     (setq org-refile-targets (quote ((org-agenda-files :level . 2))))
     (setq org-refile-use-outline-path 'file)

     ;; org-mode customization
     (setq org-log-done 'time)  ;; 
     (setq org-todo-keywords
	    '((sequence "TODO(t)" "STARTD(s)" "WAITING(w)" "|" "DONE(d)" "DELEGATED(e)" "CANCELLED(c)")))

     ;org-mode keybindings
     (define-key global-map "\C-cc" 'org-capture)    ; todo: move to use-package :bind ?
     (define-key global-map "\C-ca" 'org-agenda)     ; 
     (define-key global-map "\C-cl" 'org-store-link) ; 
   #+END_SRC

** Agenda
   #+BEGIN_SRC emacs-lisp
   (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
   
   #+END_SRC

* Windows
** Temporary
   #+BEGIN_SRC emacs-lisp :tangle no
     ;; WINDOWS SPECIFIC, for programs not in PATH
     ;(setq python-shell-interpreter "C:/Python27/Scripts/ipython.exe"
     ;      python-shell-interpreter-args "-i")
     ;(setq python-shell-interpreter "C:/Python27/python.exe")
     ;; (add-to-list 'python-shell-extra-pythonpaths "/path/to/the/dependency")
   #+END_SRC

** External Programs
*** Spelling & Dictionaries (aspell/ispell)
    #+BEGIN_SRC emacs-lisp
      ;; WINDOWS ASPELL, find, grep, ls, etc to system path
      ;;(setq exec-path (append exec-path '("C:/Program Files (x86)/Aspell/bin"
					  ;; http://aspell.net/				    ;; 
	 ;;				 "C:/Program Files (x86)/GnuWin32/bin")))
					  ;; http://gnuwin32.sourceforge.net/

      ;(setq-default ispell-program-name "aspell")

      ;; Git on Windows ?

      ;; LIST INSTALLED PACKAGES
      ;; C-h, v : package-activated-list
      ;; (alect-themes atom-one-dark-theme borland-blue-theme expand-region eziam-theme helm-projectile helm helm-core async leuven-theme material-theme org-bullets org-projectile dash popup projectile pkg-info epl tangotango-theme web-mode)
    #+END_SRC

*** Cygwin

    https://www.emacswiki.org/emacs/NTEmacsWithCygwin#toc2

    #+BEGIN_SRC emacs-lisp
      ;; Sets your shell to use cygwin's bash, if Emacs finds it's running
      ;; under Windows and c:\cygwin exists. Assumes that C:\cygwin\bin is
      ;; not already in your Windows Path (it generally should not be).
      ;;

      (if (string-match-p (regexp-quote "steven.brown") (getenv "USERPROFILE"))
          (setq my/env "work")
        (setq my/env "personal"))
  

      ;;(let* ((cygwin-root "c:/Program Files/cygwin64") ;TODO: Customize by environment home/work
      (let* ((cygwin-root (if (string-equal my/env "work")
    			  "c:/Users/steven.brown/Apps/cygwin64" ; work
    			"c:/Program Files/cygwin64"))	      ; home
    	 (cygwin-bin (concat cygwin-root "/bin")))
        (when (and (eq 'windows-nt system-type)
    	       (file-readable-p cygwin-root))

          (setq exec-path (cons cygwin-bin exec-path))
          (setenv "PATH" (concat cygwin-bin ";" (getenv "PATH")))

          ;; By default use the Windows HOME.
          ;; Otherwise, uncomment below to set a HOME
          ;;      (setenv "HOME" (concat cygwin-root "/home/eric")) ;TODO: Customize by environment

          ;; NT-emacs assumes a Windows shell. Change to bash.
          (setq shell-file-name "bash")
          (setenv "SHELL" shell-file-name) 
          (setq explicit-shell-file-name shell-file-name) 

          ;; This removes unsightly ^M characters that would otherwise
          ;; appear in the output of java applications.
          (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m)))
    #+END_SRC

* Notes

  | Key       | What                                                |
  |-----------+-----------------------------------------------------|
  | C-c '     | narrow on code block in sibling window (and return) |
  | C-c C-v t | tangle                                              |
  | C-c C-v f | tangle into specific filename, like "init.el"       |

  *Converting from .emacs or init.el*
  : (custom-set-variables
  :  '(my-variable value)
  :  '(column-number-mode t)
  :  ; ...		     
  : )		     
  : 		     

  -->

  : (setq column-number-mode t) 

  Reference:

  - [[http://pages.sachachua.com/.emacs.d/Sacha.html][Sacha Chua init.org]]
  - https://www.masteringemacs.org/article/running-shells-in-emacs-overview \
    You *must* set extra variables if customizing shell on Windows....


